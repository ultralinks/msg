// Code generated by protoc-gen-go. DO NOT EDIT.
// source: msgLogic.proto

package msgLogic

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type ParseMsgRequest struct {
	Data                 []byte   `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ParseMsgRequest) Reset()         { *m = ParseMsgRequest{} }
func (m *ParseMsgRequest) String() string { return proto.CompactTextString(m) }
func (*ParseMsgRequest) ProtoMessage()    {}
func (*ParseMsgRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_msgLogic_d5549d3295c49169, []int{0}
}
func (m *ParseMsgRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ParseMsgRequest.Unmarshal(m, b)
}
func (m *ParseMsgRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ParseMsgRequest.Marshal(b, m, deterministic)
}
func (dst *ParseMsgRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ParseMsgRequest.Merge(dst, src)
}
func (m *ParseMsgRequest) XXX_Size() int {
	return xxx_messageInfo_ParseMsgRequest.Size(m)
}
func (m *ParseMsgRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ParseMsgRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ParseMsgRequest proto.InternalMessageInfo

func (m *ParseMsgRequest) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

type ParseMsgResponse struct {
	Status               string   `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ParseMsgResponse) Reset()         { *m = ParseMsgResponse{} }
func (m *ParseMsgResponse) String() string { return proto.CompactTextString(m) }
func (*ParseMsgResponse) ProtoMessage()    {}
func (*ParseMsgResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_msgLogic_d5549d3295c49169, []int{1}
}
func (m *ParseMsgResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ParseMsgResponse.Unmarshal(m, b)
}
func (m *ParseMsgResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ParseMsgResponse.Marshal(b, m, deterministic)
}
func (dst *ParseMsgResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ParseMsgResponse.Merge(dst, src)
}
func (m *ParseMsgResponse) XXX_Size() int {
	return xxx_messageInfo_ParseMsgResponse.Size(m)
}
func (m *ParseMsgResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ParseMsgResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ParseMsgResponse proto.InternalMessageInfo

func (m *ParseMsgResponse) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func init() {
	proto.RegisterType((*ParseMsgRequest)(nil), "msgLogic.ParseMsgRequest")
	proto.RegisterType((*ParseMsgResponse)(nil), "msgLogic.ParseMsgResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgLogicClient is the client API for MsgLogic service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgLogicClient interface {
	ParseMsg(ctx context.Context, in *ParseMsgRequest, opts ...grpc.CallOption) (*ParseMsgResponse, error)
}

type msgLogicClient struct {
	cc *grpc.ClientConn
}

func NewMsgLogicClient(cc *grpc.ClientConn) MsgLogicClient {
	return &msgLogicClient{cc}
}

func (c *msgLogicClient) ParseMsg(ctx context.Context, in *ParseMsgRequest, opts ...grpc.CallOption) (*ParseMsgResponse, error) {
	out := new(ParseMsgResponse)
	err := c.cc.Invoke(ctx, "/msgLogic.MsgLogic/ParseMsg", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgLogicServer is the server API for MsgLogic service.
type MsgLogicServer interface {
	ParseMsg(context.Context, *ParseMsgRequest) (*ParseMsgResponse, error)
}

func RegisterMsgLogicServer(s *grpc.Server, srv MsgLogicServer) {
	s.RegisterService(&_MsgLogic_serviceDesc, srv)
}

func _MsgLogic_ParseMsg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ParseMsgRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgLogicServer).ParseMsg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/msgLogic.MsgLogic/ParseMsg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgLogicServer).ParseMsg(ctx, req.(*ParseMsgRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _MsgLogic_serviceDesc = grpc.ServiceDesc{
	ServiceName: "msgLogic.MsgLogic",
	HandlerType: (*MsgLogicServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ParseMsg",
			Handler:    _MsgLogic_ParseMsg_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "msgLogic.proto",
}

func init() { proto.RegisterFile("msgLogic.proto", fileDescriptor_msgLogic_d5549d3295c49169) }

var fileDescriptor_msgLogic_d5549d3295c49169 = []byte{
	// 185 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0xcb, 0x2d, 0x4e, 0xf7,
	0xc9, 0x4f, 0xcf, 0x4c, 0xd6, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x80, 0xf1, 0x95, 0x54,
	0xb9, 0xf8, 0x03, 0x12, 0x8b, 0x8a, 0x53, 0x7d, 0x8b, 0xd3, 0x83, 0x52, 0x0b, 0x4b, 0x53, 0x8b,
	0x4b, 0x84, 0x84, 0xb8, 0x58, 0x52, 0x12, 0x4b, 0x12, 0x25, 0x18, 0x15, 0x18, 0x35, 0x78, 0x82,
	0xc0, 0x6c, 0x25, 0x2d, 0x2e, 0x01, 0x84, 0xb2, 0xe2, 0x82, 0xfc, 0xbc, 0xe2, 0x54, 0x21, 0x31,
	0x2e, 0xb6, 0xe2, 0x92, 0xc4, 0x92, 0xd2, 0x62, 0xb0, 0x4a, 0xce, 0x20, 0x28, 0xcf, 0xc8, 0x9f,
	0x8b, 0xc3, 0x17, 0x6a, 0xbc, 0x90, 0x33, 0x17, 0x07, 0x4c, 0x9f, 0x90, 0xa4, 0x1e, 0xdc, 0x15,
	0x68, 0x56, 0x4a, 0x49, 0x61, 0x93, 0x82, 0x58, 0xa3, 0xc4, 0xe0, 0x64, 0xc0, 0x25, 0x9d, 0x99,
	0xaf, 0x97, 0x5e, 0x54, 0x90, 0xac, 0x97, 0x5a, 0x91, 0x98, 0x5b, 0x90, 0x93, 0x5a, 0xac, 0x57,
	0x94, 0x5f, 0x5a, 0x92, 0x9a, 0x5e, 0x9a, 0x99, 0x92, 0xea, 0xc4, 0x1f, 0x04, 0x62, 0xbb, 0x83,
	0xd8, 0x01, 0x20, 0xdf, 0x05, 0x30, 0x26, 0xb1, 0x81, 0xbd, 0x69, 0x0c, 0x08, 0x00, 0x00, 0xff,
	0xff, 0x8f, 0xd1, 0x09, 0x31, 0xf8, 0x00, 0x00, 0x00,
}
